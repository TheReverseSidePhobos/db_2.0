import type { NextPage } from 'next';
import Head from 'next/head';
import Layout from '../components/Layout/Layout';
import Modal from '../components/Modal/Modal';
import SideBar from '../components/SideBar';
import style from '../components/SideBar/SideBar.module.scss';
import { useTypedSelector } from '../components/hooks/useTypedSelector';
import Column from '../components/Column/Column';
import { useEffect, useState } from 'react';
import Cookie from 'js-cookie';
import { useDispatch } from 'react-redux';
import { add_to_redux_from_db, updateTasks } from '../store/actions/actions';
import Alert from '../components/Alert/Alert';
import { compare } from '../utils/ustils';
import Cookies from 'js-cookie';

const Home: NextPage = () => {
  const { modalShow, tasks, infoModalShow, alertShow } = useTypedSelector(
    (state) => state.task
  );

  let new_tasks = tasks.filter((task) => task.position == 'new');
  let progress_tasks = tasks.filter((task) => task.position == 'progress');
  let done_tasks = tasks.filter((task) => task.position == 'done');

  const dispatch = useDispatch();
  useEffect(() => {
    let obj = Cookie.get('tasks');
    if (obj) {
      let jsonObj = JSON.parse(obj);

      jsonObj.forEach((el: any) => {
        let isInRedux = tasks.find((task) => task.id == el.id);
        if (!isInRedux) {
          dispatch(add_to_redux_from_db(el));
        }
      });
    }
  }, []);

  const [equalArr, setEqualArr] = useState();

  useEffect(() => {
    let obj = Cookie.get('tasks');
    if (obj) {
      let jsonObj = JSON.parse(obj);

      let isEqual = setEqualArr(compare(tasks, jsonObj));
      console.log('equalArr: ', isEqual);
    }
  }, []);

  const handleSorting = (option: any, position: any) => {
    debugger;
    if (position == 'New Tasks') {
      let sorted;
      switch (option) {
        case 'By Priority ASC':
          sorted = new_tasks.sort((a, b) =>
            a.priorityNum < b.priorityNum ? 1 : -1
          );
          break;
        case 'By Priority DESC':
          sorted = new_tasks.sort((a, b) =>
            a.priorityNum > b.priorityNum ? 1 : -1
          );
          break;
        case 'By Date ASC':
          sorted = new_tasks.sort((a, b) =>
            a.dateWasMade < b.dateWasMade ? 1 : -1
          );
          break;
        case 'By Date DESC':
          sorted = new_tasks.sort((a, b) =>
            a.dateWasMade > b.dateWasMade ? 1 : -1
          );
          break;

        default:
          break;
      }

      dispatch(updateTasks(sorted));
      let sortedTasks = JSON.stringify(sorted);
      Cookies.set('tasks', sortedTasks);
    }
  };
  return (
    <Layout>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <title>T.M.</title>
      </Head>
      {alertShow && <Alert />}
      <main className="page container">
        <div className={style.sidebar}>
          <SideBar />
        </div>
        <div className="columns">
          <Column
            position="new"
            inner_tasks={new_tasks}
            handleSorting={handleSorting}
          />
          <Column
            position="progress"
            inner_tasks={progress_tasks}
            handleSorting
          />
          <Column
            position="done"
            inner_tasks={done_tasks}
            handleSorting={handleSorting}
          />
        </div>
        {modalShow && <Modal />}
        {infoModalShow && <Modal />}
      </main>
    </Layout>
  );
};

export default Home;
